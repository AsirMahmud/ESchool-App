# Generated by Django 5.2.5 on 2025-09-01 14:04

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('department', '0002_initial'),
        ('employee', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='EventResource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resource_type', models.CharField(choices=[('venue', 'Venue'), ('equipment', 'Equipment'), ('catering', 'Catering'), ('transport', 'Transport'), ('decoration', 'Decoration'), ('security', 'Security'), ('medical', 'Medical'), ('other', 'Other')], help_text='Type of resource', max_length=20)),
                ('name', models.CharField(help_text='Name of the resource', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Description of the resource', null=True)),
                ('quantity', models.PositiveIntegerField(default=1, help_text='Quantity required')),
                ('cost', models.DecimalField(blank=True, decimal_places=2, help_text='Cost of this resource', max_digits=10, null=True)),
                ('provider', models.CharField(blank=True, help_text='Provider of the resource', max_length=200, null=True)),
                ('contact_info', models.CharField(blank=True, help_text='Contact information for the provider', max_length=200, null=True)),
                ('is_confirmed', models.BooleanField(default=False, help_text='Whether this resource is confirmed')),
                ('notes', models.TextField(blank=True, help_text='Additional notes', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Event Resource',
                'verbose_name_plural': 'Event Resources',
                'db_table': 'event_resources',
                'ordering': ['resource_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('name', models.CharField(help_text='Name of the event', max_length=200, primary_key=True, serialize=False, validators=[django.core.validators.MinLengthValidator(2)])),
                ('event_type', models.CharField(choices=[('academic', 'Academic'), ('sports', 'Sports'), ('cultural', 'Cultural'), ('social', 'Social'), ('religious', 'Religious'), ('celebration', 'Celebration'), ('competition', 'Competition'), ('workshop', 'Workshop'), ('seminar', 'Seminar'), ('conference', 'Conference'), ('graduation', 'Graduation'), ('orientation', 'Orientation'), ('parent_meeting', 'Parent Meeting'), ('other', 'Other')], help_text='Type of event', max_length=20)),
                ('description', models.TextField(help_text='Detailed description of the event')),
                ('location', models.CharField(help_text='Location where the event will take place', max_length=200)),
                ('start_date', models.DateField(help_text='Start date of the event')),
                ('end_date', models.DateField(help_text='End date of the event')),
                ('start_time', models.TimeField(help_text='Start time of the event')),
                ('end_time', models.TimeField(help_text='End time of the event')),
                ('duration', models.DurationField(help_text='Duration of the event')),
                ('status', models.CharField(choices=[('planned', 'Planned'), ('confirmed', 'Confirmed'), ('ongoing', 'Ongoing'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('postponed', 'Postponed')], default='planned', help_text='Current status of the event', max_length=20)),
                ('max_participants', models.PositiveIntegerField(blank=True, help_text='Maximum number of participants', null=True)),
                ('registration_required', models.BooleanField(default=False, help_text='Whether registration is required')),
                ('registration_deadline', models.DateTimeField(blank=True, help_text='Registration deadline', null=True)),
                ('budget', models.DecimalField(blank=True, decimal_places=2, help_text='Budget allocated for the event', max_digits=10, null=True)),
                ('actual_cost', models.DecimalField(blank=True, decimal_places=2, help_text='Actual cost of the event', max_digits=10, null=True)),
                ('requirements', models.TextField(blank=True, help_text='Special requirements for the event', null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes', null=True)),
                ('is_public', models.BooleanField(default=True, help_text='Whether this event is open to public')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('department', models.ForeignKey(help_text='Department organizing this event', on_delete=django.db.models.deletion.CASCADE, related_name='events', to='department.department')),
                ('organizer', models.ForeignKey(help_text='Employee organizing this event', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='organized_events', to='employee.employee')),
            ],
            options={
                'verbose_name': 'Event',
                'verbose_name_plural': 'Events',
                'db_table': 'events',
                'ordering': ['start_date', 'start_time'],
            },
        ),
        migrations.CreateModel(
            name='EventParticipant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('participant_type', models.CharField(choices=[('student', 'Student'), ('employee', 'Employee'), ('parent', 'Parent'), ('external', 'External')], help_text='Type of participant', max_length=20)),
                ('external_name', models.CharField(blank=True, help_text='Name of external participant', max_length=100, null=True)),
                ('external_email', models.EmailField(blank=True, help_text='Email of external participant', max_length=254, null=True)),
                ('external_phone', models.CharField(blank=True, help_text='Phone of external participant', max_length=15, null=True)),
                ('registration_date', models.DateTimeField(auto_now_add=True, help_text='Date when participant registered')),
                ('attendance_confirmed', models.BooleanField(default=False, help_text='Whether attendance was confirmed')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the participant', null=True)),
                ('employee', models.ForeignKey(blank=True, help_text='Employee participant', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='event_participations', to='employee.employee')),
                ('event', models.ForeignKey(help_text='Event this participant is registered for', on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='events.event')),
            ],
            options={
                'verbose_name': 'Event Participant',
                'verbose_name_plural': 'Event Participants',
                'db_table': 'event_participants',
            },
        ),
    ]
