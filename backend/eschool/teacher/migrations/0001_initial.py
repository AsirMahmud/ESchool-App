# Generated by Django 5.2.5 on 2025-09-01 14:04

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('classroom', '0002_initial'),
        ('employee', '0001_initial'),
        ('subject', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('teacher_id', models.OneToOneField(help_text='Employee record for this teacher', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='teacher_profile', serialize=False, to='employee.employee')),
                ('qualification', models.CharField(help_text='Teaching qualifications', max_length=200)),
                ('specialization', models.CharField(help_text='Subject specialization', max_length=200)),
                ('years_of_experience', models.PositiveIntegerField(default=0, help_text='Years of teaching experience', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(50)])),
                ('is_class_teacher', models.BooleanField(default=False, help_text='Whether this teacher is a class teacher')),
                ('max_classes', models.PositiveIntegerField(default=5, help_text='Maximum number of classes this teacher can handle', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('bio', models.TextField(blank=True, help_text='Teacher biography', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Teacher',
                'verbose_name_plural': 'Teachers',
                'db_table': 'teachers',
            },
        ),
        migrations.CreateModel(
            name='TeacherPerformance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('evaluation_date', models.DateField(help_text='Date of performance evaluation')),
                ('academic_performance', models.CharField(choices=[('excellent', 'Excellent'), ('good', 'Good'), ('satisfactory', 'Satisfactory'), ('needs_improvement', 'Needs Improvement'), ('poor', 'Poor')], help_text='Academic performance rating', max_length=20)),
                ('classroom_management', models.CharField(choices=[('excellent', 'Excellent'), ('good', 'Good'), ('satisfactory', 'Satisfactory'), ('needs_improvement', 'Needs Improvement'), ('poor', 'Poor')], help_text='Classroom management rating', max_length=20)),
                ('student_interaction', models.CharField(choices=[('excellent', 'Excellent'), ('good', 'Good'), ('satisfactory', 'Satisfactory'), ('needs_improvement', 'Needs Improvement'), ('poor', 'Poor')], help_text='Student interaction rating', max_length=20)),
                ('professional_development', models.CharField(choices=[('excellent', 'Excellent'), ('good', 'Good'), ('satisfactory', 'Satisfactory'), ('needs_improvement', 'Needs Improvement'), ('poor', 'Poor')], help_text='Professional development rating', max_length=20)),
                ('overall_rating', models.CharField(choices=[('excellent', 'Excellent'), ('good', 'Good'), ('satisfactory', 'Satisfactory'), ('needs_improvement', 'Needs Improvement'), ('poor', 'Poor')], help_text='Overall performance rating', max_length=20)),
                ('comments', models.TextField(blank=True, help_text='Additional comments', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('evaluator', models.ForeignKey(help_text='Person who conducted the evaluation', null=True, on_delete=django.db.models.deletion.SET_NULL, to='employee.employee')),
                ('teacher', models.ForeignKey(help_text='Teacher being evaluated', on_delete=django.db.models.deletion.CASCADE, related_name='performance_records', to='teacher.teacher')),
            ],
            options={
                'verbose_name': 'Teacher Performance',
                'verbose_name_plural': 'Teacher Performance Records',
                'db_table': 'teacher_performance',
                'ordering': ['-evaluation_date'],
            },
        ),
        migrations.CreateModel(
            name='TeacherClass',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this teaching assignment is active')),
                ('start_date', models.DateField(help_text='Date when teacher started teaching this class')),
                ('end_date', models.DateField(blank=True, help_text='Date when teacher stopped teaching this class', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('class_room', models.ForeignKey(help_text='Class being taught', on_delete=django.db.models.deletion.CASCADE, related_name='teachers_teaching', to='classroom.class')),
                ('subject', models.ForeignKey(help_text='Subject being taught in this class', on_delete=django.db.models.deletion.CASCADE, to='subject.subject')),
                ('teacher', models.ForeignKey(help_text='Teacher teaching this class', on_delete=django.db.models.deletion.CASCADE, related_name='classes_taught', to='teacher.teacher')),
            ],
            options={
                'verbose_name': 'Teacher Class',
                'verbose_name_plural': 'Teacher Classes',
                'db_table': 'teacher_classes',
                'unique_together': {('teacher', 'class_room', 'subject')},
            },
        ),
        migrations.CreateModel(
            name='TeacherSubject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this teaching assignment is active')),
                ('start_date', models.DateField(help_text='Date when teacher started teaching this subject')),
                ('end_date', models.DateField(blank=True, help_text='Date when teacher stopped teaching this subject', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('subject', models.ForeignKey(help_text='Subject being taught', on_delete=django.db.models.deletion.CASCADE, related_name='teachers_teaching', to='subject.subject')),
                ('teacher', models.ForeignKey(help_text='Teacher teaching this subject', on_delete=django.db.models.deletion.CASCADE, related_name='subjects_taught', to='teacher.teacher')),
            ],
            options={
                'verbose_name': 'Teacher Subject',
                'verbose_name_plural': 'Teacher Subjects',
                'db_table': 'teacher_subjects',
                'unique_together': {('teacher', 'subject')},
            },
        ),
    ]
