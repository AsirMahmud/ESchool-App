# Generated by Django 5.2.5 on 2025-09-01 14:04

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('department', '0002_initial'),
        ('level', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('s_code', models.CharField(help_text='Subject code (e.g., MATH101, ENG201)', max_length=20, primary_key=True, serialize=False, validators=[django.core.validators.MinLengthValidator(2)])),
                ('s_name', models.CharField(help_text='Subject name (e.g., Mathematics, English Literature)', max_length=100, validators=[django.core.validators.MinLengthValidator(2)])),
                ('subject_type', models.CharField(choices=[('core', 'Core Subject'), ('elective', 'Elective Subject'), ('extracurricular', 'Extracurricular'), ('language', 'Language'), ('science', 'Science'), ('mathematics', 'Mathematics'), ('social_studies', 'Social Studies'), ('arts', 'Arts'), ('physical_education', 'Physical Education'), ('computer', 'Computer Science')], default='core', help_text='Type of subject', max_length=20)),
                ('difficulty_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], default='beginner', help_text='Difficulty level of the subject', max_length=20)),
                ('description', models.TextField(blank=True, help_text='Description of the subject', null=True)),
                ('credits', models.PositiveIntegerField(default=1, help_text='Credit hours for this subject')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this subject is currently active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('department', models.ForeignKey(help_text='Department this subject belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='subjects', to='department.department')),
                ('prerequisites', models.ManyToManyField(blank=True, help_text='Subjects that must be completed before taking this subject', related_name='prerequisite_for', to='subject.subject')),
            ],
            options={
                'verbose_name': 'Subject',
                'verbose_name_plural': 'Subjects',
                'db_table': 'subjects',
                'ordering': ['s_code'],
            },
        ),
        migrations.CreateModel(
            name='SubjectMaterial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('material_type', models.CharField(choices=[('textbook', 'Textbook'), ('workbook', 'Workbook'), ('reference', 'Reference Book'), ('digital', 'Digital Resource'), ('handout', 'Handout'), ('worksheet', 'Worksheet'), ('video', 'Video'), ('audio', 'Audio'), ('software', 'Software'), ('other', 'Other')], help_text='Type of teaching material', max_length=20)),
                ('title', models.CharField(help_text='Title of the material', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Description of the material', null=True)),
                ('file_path', models.URLField(blank=True, help_text='Path to the material file', null=True)),
                ('is_required', models.BooleanField(default=False, help_text='Whether this material is required')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this material is currently active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('level', models.ForeignKey(help_text='Level this material is for', on_delete=django.db.models.deletion.CASCADE, to='level.level')),
                ('subject', models.ForeignKey(help_text='Subject this material belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='materials', to='subject.subject')),
            ],
            options={
                'verbose_name': 'Subject Material',
                'verbose_name_plural': 'Subject Materials',
                'db_table': 'subject_materials',
                'ordering': ['subject', 'level', 'material_type', 'title'],
            },
        ),
        migrations.CreateModel(
            name='SubjectSyllabus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('academic_year', models.CharField(help_text='Academic year (e.g., 2024-25)', max_length=10)),
                ('syllabus_content', models.TextField(help_text='Detailed syllabus content')),
                ('learning_objectives', models.TextField(blank=True, help_text='Learning objectives for this subject', null=True)),
                ('assessment_criteria', models.TextField(blank=True, help_text='Assessment criteria and methods', null=True)),
                ('textbooks', models.TextField(blank=True, help_text='Recommended textbooks and resources', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this syllabus is currently active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('level', models.ForeignKey(help_text='Level this syllabus is for', on_delete=django.db.models.deletion.CASCADE, to='level.level')),
                ('subject', models.ForeignKey(help_text='Subject this syllabus belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='syllabi', to='subject.subject')),
            ],
            options={
                'verbose_name': 'Subject Syllabus',
                'verbose_name_plural': 'Subject Syllabi',
                'db_table': 'subject_syllabi',
                'ordering': ['subject', 'level', '-academic_year'],
                'unique_together': {('subject', 'level', 'academic_year')},
            },
        ),
    ]
