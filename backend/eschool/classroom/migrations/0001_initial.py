# Generated by Django 5.2.5 on 2025-09-01 14:04

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ClassBooking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('booking_date', models.DateField(help_text='Date of the booking')),
                ('start_time', models.TimeField(help_text='Start time of the booking')),
                ('end_time', models.TimeField(help_text='End time of the booking')),
                ('purpose', models.CharField(help_text='Purpose of the booking', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Additional details about the booking', null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('cancelled', 'Cancelled'), ('completed', 'Completed')], default='pending', help_text='Status of the booking', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Class Booking',
                'verbose_name_plural': 'Class Bookings',
                'db_table': 'class_bookings',
                'ordering': ['-booking_date', 'start_time'],
            },
        ),
        migrations.CreateModel(
            name='ClassSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.CharField(choices=[('monday', 'Monday'), ('tuesday', 'Tuesday'), ('wednesday', 'Wednesday'), ('thursday', 'Thursday'), ('friday', 'Friday'), ('saturday', 'Saturday'), ('sunday', 'Sunday')], help_text='Day of the week', max_length=10)),
                ('start_time', models.TimeField(help_text='Start time of the class')),
                ('end_time', models.TimeField(help_text='End time of the class')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this schedule is currently active')),
                ('academic_year', models.CharField(help_text='Academic year (e.g., 2024-25)', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Class Schedule',
                'verbose_name_plural': 'Class Schedules',
                'db_table': 'class_schedules',
                'ordering': ['day_of_week', 'start_time'],
            },
        ),
        migrations.CreateModel(
            name='Class',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('floor', models.PositiveIntegerField(help_text='Floor number where the room is located', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('room_no', models.CharField(help_text='Room number or identifier', max_length=20)),
                ('room_name', models.CharField(blank=True, help_text='Name of the room (e.g., Computer Lab 1)', max_length=100, null=True)),
                ('room_type', models.CharField(choices=[('classroom', 'Classroom'), ('laboratory', 'Laboratory'), ('library', 'Library'), ('computer_lab', 'Computer Laboratory'), ('science_lab', 'Science Laboratory'), ('art_room', 'Art Room'), ('music_room', 'Music Room'), ('gymnasium', 'Gymnasium'), ('auditorium', 'Auditorium'), ('conference_room', 'Conference Room'), ('office', 'Office'), ('storage', 'Storage Room'), ('other', 'Other')], default='classroom', help_text='Type of room', max_length=20)),
                ('capacity', models.PositiveIntegerField(help_text='Maximum capacity of the room', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(500)])),
                ('description', models.TextField(blank=True, help_text='Description of the room and its facilities', null=True)),
                ('equipment', models.TextField(blank=True, help_text='Available equipment in the room', null=True)),
                ('is_available', models.BooleanField(default=True, help_text='Whether the room is currently available')),
                ('is_air_conditioned', models.BooleanField(default=False, help_text='Whether the room has air conditioning')),
                ('has_projector', models.BooleanField(default=False, help_text='Whether the room has a projector')),
                ('has_whiteboard', models.BooleanField(default=True, help_text='Whether the room has a whiteboard')),
                ('has_computers', models.BooleanField(default=False, help_text='Whether the room has computers')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Class/Room',
                'verbose_name_plural': 'Classes/Rooms',
                'db_table': 'classes',
                'ordering': ['floor', 'room_no'],
                'unique_together': {('floor', 'room_no')},
            },
        ),
    ]
