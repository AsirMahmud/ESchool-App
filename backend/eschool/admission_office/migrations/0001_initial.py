# Generated by Django 5.2.5 on 2025-09-01 14:04

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Admission',
            fields=[
                ('admission_id', models.AutoField(primary_key=True, serialize=False)),
                ('student_name', models.CharField(help_text='Name of the student applying', max_length=100)),
                ('date_of_birth', models.DateField(help_text='Date of birth of the student')),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], help_text='Gender of the student', max_length=10)),
                ('parent_name', models.CharField(help_text='Name of parent/guardian', max_length=100)),
                ('parent_email', models.EmailField(help_text='Email of parent/guardian', max_length=254)),
                ('parent_phone', models.CharField(help_text='Phone of parent/guardian', max_length=15)),
                ('address', models.TextField(help_text='Address of the family')),
                ('previous_school', models.CharField(blank=True, help_text='Previous school attended', max_length=200, null=True)),
                ('application_date', models.DateField(auto_now_add=True, help_text='Date of application')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('waitlisted', 'Waitlisted'), ('enrolled', 'Enrolled'), ('withdrawn', 'Withdrawn')], default='pending', help_text='Admission status', max_length=20)),
                ('admission_date', models.DateField(blank=True, help_text='Date of admission (if approved)', null=True)),
                ('admission_fee', models.DecimalField(blank=True, decimal_places=2, help_text='Admission fee amount', max_digits=10, null=True)),
                ('admission_fee_paid', models.BooleanField(default=False, help_text='Whether admission fee has been paid')),
                ('documents_submitted', models.TextField(blank=True, help_text='List of documents submitted', null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Admission',
                'verbose_name_plural': 'Admissions',
                'db_table': 'admissions',
                'ordering': ['-application_date'],
            },
        ),
        migrations.CreateModel(
            name='Attendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(help_text='Date of attendance')),
                ('check_in_time', models.TimeField(blank=True, help_text='Check-in time', null=True)),
                ('check_out_time', models.TimeField(blank=True, help_text='Check-out time', null=True)),
                ('status', models.CharField(choices=[('present', 'Present'), ('absent', 'Absent'), ('late', 'Late'), ('excused', 'Excused Absence'), ('half_day', 'Half Day')], default='present', help_text='Attendance status', max_length=20)),
                ('notes', models.TextField(blank=True, help_text='Additional notes', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Attendance',
                'verbose_name_plural': 'Attendance Records',
                'db_table': 'attendance',
                'ordering': ['-date', 'student'],
            },
        ),
        migrations.CreateModel(
            name='Exam',
            fields=[
                ('exam_id', models.AutoField(primary_key=True, serialize=False)),
                ('exam_name', models.CharField(help_text='Name of the exam', max_length=200, validators=[django.core.validators.MinLengthValidator(2)])),
                ('exam_type', models.CharField(choices=[('midterm', 'Midterm Exam'), ('final', 'Final Exam'), ('quiz', 'Quiz'), ('assignment', 'Assignment'), ('project', 'Project'), ('practical', 'Practical Exam'), ('oral', 'Oral Exam'), ('entrance', 'Entrance Exam'), ('placement', 'Placement Test'), ('other', 'Other')], help_text='Type of exam', max_length=20)),
                ('duration', models.DurationField(help_text='Duration of the exam')),
                ('total_marks', models.PositiveIntegerField(help_text='Total marks for the exam')),
                ('passing_marks', models.PositiveIntegerField(help_text='Passing marks for the exam')),
                ('exam_date', models.DateField(help_text='Date of the exam')),
                ('start_time', models.TimeField(help_text='Start time of the exam')),
                ('end_time', models.TimeField(help_text='End time of the exam')),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('ongoing', 'Ongoing'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('postponed', 'Postponed')], default='scheduled', help_text='Current status of the exam', max_length=20)),
                ('instructions', models.TextField(blank=True, help_text='Instructions for the exam', null=True)),
                ('academic_year', models.CharField(help_text='Academic year for this exam', max_length=10)),
                ('semester', models.CharField(blank=True, help_text='Semester (if applicable)', max_length=20, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Exam',
                'verbose_name_plural': 'Exams',
                'db_table': 'exams',
                'ordering': ['exam_date', 'start_time'],
            },
        ),
        migrations.CreateModel(
            name='ExamResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('marks_obtained', models.PositiveIntegerField(help_text='Marks obtained by the student')),
                ('grade', models.CharField(choices=[('A+', 'A+'), ('A', 'A'), ('A-', 'A-'), ('B+', 'B+'), ('B', 'B'), ('B-', 'B-'), ('C+', 'C+'), ('C', 'C'), ('C-', 'C-'), ('D+', 'D+'), ('D', 'D'), ('F', 'F')], help_text='Grade received', max_length=2)),
                ('is_passed', models.BooleanField(help_text='Whether the student passed the exam')),
                ('remarks', models.TextField(blank=True, help_text='Teacher remarks on the performance', null=True)),
                ('submitted_at', models.DateTimeField(blank=True, help_text='When the exam was submitted', null=True)),
                ('graded_at', models.DateTimeField(blank=True, help_text='When the exam was graded', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Exam Result',
                'verbose_name_plural': 'Exam Results',
                'db_table': 'exam_results',
                'ordering': ['-marks_obtained'],
            },
        ),
    ]
