# Generated by Django 5.2.5 on 2025-09-01 14:04

import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('department', '0002_initial'),
        ('level', '0002_initial'),
        ('parent', '0001_initial'),
        ('subject', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Scholarship',
            fields=[
                ('sch_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Name of the scholarship', max_length=200)),
                ('scholarship_type', models.CharField(choices=[('merit', 'Merit-based'), ('need', 'Need-based'), ('sports', 'Sports'), ('academic', 'Academic Excellence'), ('cultural', 'Cultural'), ('special', 'Special Circumstances')], help_text='Type of scholarship', max_length=20)),
                ('description', models.TextField(help_text='Description of the scholarship')),
                ('amount', models.DecimalField(decimal_places=2, help_text='Scholarship amount', max_digits=10)),
                ('criteria', models.TextField(help_text='Eligibility criteria')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this scholarship is currently available')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Scholarship',
                'verbose_name_plural': 'Scholarships',
                'db_table': 'scholarships',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('s_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique student ID', primary_key=True, serialize=False)),
                ('student_number', models.CharField(help_text='Student admission number', max_length=20, unique=True)),
                ('name', models.CharField(help_text='Full name of the student', max_length=100, validators=[django.core.validators.MinLengthValidator(2)])),
                ('email', models.EmailField(help_text='Email address', max_length=254, unique=True, validators=[django.core.validators.EmailValidator()])),
                ('phone', models.CharField(blank=True, help_text='Contact phone number', max_length=15, null=True)),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], help_text='Gender', max_length=10)),
                ('date_of_birth', models.DateField(help_text='Date of birth')),
                ('enroll_date', models.DateField(help_text='Date when student enrolled')),
                ('address', models.TextField(help_text='Home address')),
                ('previous_education', models.TextField(blank=True, help_text='Previous educational background', null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('graduated', 'Graduated'), ('transferred', 'Transferred'), ('suspended', 'Suspended'), ('expelled', 'Expelled')], default='active', help_text='Current student status', max_length=20)),
                ('emergency_contact_name', models.CharField(help_text='Emergency contact person name', max_length=100)),
                ('emergency_contact_phone', models.CharField(help_text='Emergency contact phone number', max_length=15)),
                ('medical_conditions', models.TextField(blank=True, help_text='Medical conditions or allergies', null=True)),
                ('achievements', models.TextField(blank=True, help_text='Student achievements and awards', null=True)),
                ('photo', models.URLField(blank=True, help_text='URL to student photo', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('department', models.ForeignKey(help_text='Department the student belongs to', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='students', to='department.department')),
                ('level', models.ForeignKey(help_text='Current academic level', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='students', to='level.level')),
                ('section', models.ForeignKey(blank=True, help_text='Current section', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='students', to='level.section')),
            ],
            options={
                'verbose_name': 'Student',
                'verbose_name_plural': 'Students',
                'db_table': 'students',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='StudentActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_name', models.CharField(help_text='Name of the activity', max_length=200)),
                ('activity_type', models.CharField(choices=[('sports', 'Sports'), ('academic', 'Academic'), ('cultural', 'Cultural'), ('social', 'Social'), ('volunteer', 'Volunteer'), ('leadership', 'Leadership'), ('art', 'Art'), ('music', 'Music'), ('drama', 'Drama'), ('debate', 'Debate'), ('other', 'Other')], help_text='Type of activity', max_length=20)),
                ('description', models.TextField(blank=True, help_text='Description of the activity', null=True)),
                ('start_date', models.DateField(help_text='Start date of participation')),
                ('end_date', models.DateField(blank=True, help_text='End date of participation', null=True)),
                ('position', models.CharField(blank=True, help_text='Position held in the activity', max_length=100, null=True)),
                ('achievements', models.TextField(blank=True, help_text='Achievements in this activity', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether the student is currently active in this activity')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('student', models.ForeignKey(help_text='Student participating in this activity', on_delete=django.db.models.deletion.CASCADE, related_name='activities', to='student.student')),
            ],
            options={
                'verbose_name': 'Student Activity',
                'verbose_name_plural': 'Student Activities',
                'db_table': 'student_activities',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='StudentDiary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task', models.TextField(help_text='Task or assignment description')),
                ('due_date', models.DateField(help_text='Due date for the task')),
                ('completion_date', models.DateField(blank=True, help_text='Date when task was completed', null=True)),
                ('feedback', models.TextField(blank=True, help_text='Teacher feedback on the task', null=True)),
                ('grade', models.CharField(blank=True, help_text='Grade received for the task', max_length=10, null=True)),
                ('is_completed', models.BooleanField(default=False, help_text='Whether the task is completed')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('student', models.ForeignKey(help_text='Student for this diary entry', on_delete=django.db.models.deletion.CASCADE, related_name='diary_entries', to='student.student')),
                ('subject', models.ForeignKey(help_text='Subject for this diary entry', on_delete=django.db.models.deletion.CASCADE, to='subject.subject')),
            ],
            options={
                'verbose_name': 'Student Diary Entry',
                'verbose_name_plural': 'Student Diary Entries',
                'db_table': 'student_diary',
                'ordering': ['-due_date'],
            },
        ),
        migrations.CreateModel(
            name='StudentParent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('relationship', models.CharField(choices=[('father', 'Father'), ('mother', 'Mother'), ('guardian', 'Guardian'), ('grandfather', 'Grandfather'), ('grandmother', 'Grandmother'), ('uncle', 'Uncle'), ('aunt', 'Aunt'), ('other', 'Other')], help_text='Relationship to student', max_length=20)),
                ('is_primary_contact', models.BooleanField(default=False, help_text='Whether this is the primary contact')),
                ('is_emergency_contact', models.BooleanField(default=False, help_text='Whether this person is an emergency contact')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this relationship is currently active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('parent', models.ForeignKey(help_text='Parent/Guardian', on_delete=django.db.models.deletion.CASCADE, related_name='children', to='parent.parent')),
                ('student', models.ForeignKey(help_text='Student', on_delete=django.db.models.deletion.CASCADE, related_name='parents', to='student.student')),
            ],
            options={
                'verbose_name': 'Student Parent',
                'verbose_name_plural': 'Student Parents',
                'db_table': 'student_parents',
                'unique_together': {('student', 'parent')},
            },
        ),
        migrations.CreateModel(
            name='StudentScholarship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('award_date', models.DateField(help_text='Date when scholarship was awarded')),
                ('amount_awarded', models.DecimalField(decimal_places=2, help_text='Amount awarded', max_digits=10)),
                ('academic_year', models.CharField(help_text='Academic year for this scholarship', max_length=10)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this scholarship is currently active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('scholarship', models.ForeignKey(help_text='Scholarship being awarded', on_delete=django.db.models.deletion.CASCADE, related_name='awarded_to', to='student.scholarship')),
                ('student', models.ForeignKey(help_text='Student receiving the scholarship', on_delete=django.db.models.deletion.CASCADE, related_name='scholarships', to='student.student')),
            ],
            options={
                'verbose_name': 'Student Scholarship',
                'verbose_name_plural': 'Student Scholarships',
                'db_table': 'student_scholarships',
                'ordering': ['-award_date'],
                'unique_together': {('student', 'scholarship', 'academic_year')},
            },
        ),
    ]
